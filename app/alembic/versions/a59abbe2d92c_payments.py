"""payments

Revision ID: a59abbe2d92c
Revises: aaaf6edfef8d
Create Date: 2023-02-03 09:26:05.624618

"""
from alembic import op
import sqlalchemy as sa

from sqlalchemy.dialects import postgresql

from sqlalchemy import orm

from sqlalchemy.sql import expression
from sqlalchemy.ext.declarative import declarative_base
import enum


# revision identifiers, used by Alembic.
revision = 'a59abbe2d92c'
down_revision = 'aaaf6edfef8d'
branch_labels = None
depends_on = None

Base = declarative_base()

class AdvertisementKindEnum(enum.Enum):
    vip = "vip"
    additonal = "additonal"
    basic = "basic"
    admin = "admin"

class Advertisement(Base):
    __tablename__ = 'adv'
    id = sa.Column(sa.Integer, primary_key=True)
    user_id = sa.Column(sa.Integer, sa.ForeignKey("client.id", ondelete="CASCADE"))
    kind = sa.Column(
        sa.Enum(AdvertisementKindEnum, values_callable=lambda obj: [e.value for e in obj]),
        nullable=False
    )

class Client(Base):
    __tablename__ = 'client'
    id = sa.Column(sa.Integer, primary_key=True)
    is_vip = sa.Column(sa.Boolean, default=expression.false(), server_default=expression.false(), nullable=False)
    is_admin = sa.Column(sa.Boolean, default=expression.false(), server_default=expression.false(), nullable=False)
    is_owner = sa.Column(sa.Boolean, default=expression.false(), server_default=expression.false(), nullable=False)

    advertisements = orm.relationship(
        "Advertisement",
        foreign_keys=[Advertisement.user_id],
        backref="client"
    )



def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    bind = op.get_bind()
    session = orm.Session(bind=bind)

    op.create_table('additional_advs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('client_id', sa.Integer(), nullable=True),
    sa.Column('start', sa.Date(), nullable=True),
    sa.Column('end', sa.Date(), nullable=True),
    sa.Column('reserved', sa.Boolean(), server_default=sa.text('false'), nullable=False),
    sa.ForeignKeyConstraint(['client_id'], ['client.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    advertisementkindenum = postgresql.ENUM(AdvertisementKindEnum, name='advertisementkindenum')
    advertisementkindenum.create(op.get_bind(), checkfirst=True)
    op.add_column('adv', sa.Column('kind', sa.Enum('vip', 'additonal', 'basic', 'admin', name='advertisementkindenum'), nullable=True))
    op.add_column('adv', sa.Column('additional_advertisement_id', sa.Integer(), nullable=True))
    op.create_foreign_key(None, 'adv', 'additional_advs', ['additional_advertisement_id'], ['id'], ondelete='SET NULL')

    advs = [adv for adv in session.query(Advertisement)]

    for adv in advs:
        if adv.client.is_admin or adv.client.is_owner:
            adv.kind = AdvertisementKindEnum.admin.value
        else:
            adv.kind = AdvertisementKindEnum.basic.value

    session.commit()
    op.alter_column('adv', 'kind', nullable=False)

    op.add_column('client', sa.Column('vip_start', sa.Date(), nullable=True))
    op.add_column('client', sa.Column('vip_end', sa.Date(), nullable=True))
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('client', 'vip_end')
    op.drop_column('client', 'vip_start')
    op.drop_constraint(None, 'adv', type_='foreignkey')
    op.drop_column('adv', 'additional_advertisement_id')
    op.drop_column('adv', 'kind')
    advertisementkindenum = postgresql.ENUM(AdvertisementKindEnum, name='advertisementkindenum')
    advertisementkindenum.drop(op.get_bind(), checkfirst=True)
    op.drop_table('additional_advs')
    # ### end Alembic commands ###
